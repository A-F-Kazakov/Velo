project(Utility VERSION 0.0.1)

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)

set(${PROJECT_NAME_UPPER}_VERSION ${PROJECT_VERSION})
set(${PROJECT_NAME_UPPER}_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(${PROJECT_NAME_UPPER}_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(${PROJECT_NAME_UPPER}_VERSION_PATCH ${PROJECT_VERSION_PATCH})

message(STATUS "${PROJECT_NAME} Version: ${${PROJECT_NAME_UPPER}_VERSION_MAJOR}.${${PROJECT_NAME_UPPER}_VERSION_MINOR}.${${PROJECT_NAME_UPPER}_VERSION_PATCH}")

option(${PROJECT_NAME_UPPER}_BUILD_EXAMPLES "Build ${PROJECT_NAME} examples" OFF)

set(INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)

add_library(${PROJECT_NAME}
	${SOURCE_DIR}/settings.cpp
	${SOURCE_DIR}/argument_parser.cpp
	${SOURCE_DIR}/file_watcher.cpp
	${SOURCE_DIR}/logger.cpp
)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${INCLUDE_DIR}> 
		$<INSTALL_INTERFACE:include/${PROJECT_NAME_LOWER}>
)
set_target_properties(${PROJECT_NAME}
	PROPERTIES
		OUTPUT_NAME ${PROJECT_NAME}
		VERSION ${PROJECT_VERSION}
		SOVERSION ${PROJECT_VERSION_MAJOR}
		CLEAN_DIRECT_OUTPUT ON
)

add_library(${CMAKE_PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

install(EXPORT ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_LIB_DIR}/cmake/${PROJECT_NAME_LOWER} FILE ${PROJECT_NAME}Config.cmake)
install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME}
	RUNTIME DESTINATION bin COMPONENT ${PROJECT_NAME}
	LIBRARY DESTINATION lib COMPONENT ${PROJECT_NAME}
	ARCHIVE DESTINATION lib COMPONENT ${PROJECT_NAME}
)

if(${PROJECT_NAME_UPPER}_BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

